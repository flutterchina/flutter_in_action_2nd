(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{610:function(e,t,v){"use strict";v.r(t);var a=v(45),_=Object(a.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"_10-1-自定义组件方法简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-自定义组件方法简介"}},[e._v("#")]),e._v(" 10.1 自定义组件方法简介")]),e._v(" "),v("p",[e._v("当Flutter提供的现有组件无法满足我们的需求，或者我们为了共享代码需要封装一些通用组件，这时我们就需要自定义组件。在Flutter中自定义组件有三种方式：通过组合其它组件、自绘和实现RenderObject。本节我们先分别介绍一下这三种方式的特点，后面章节中则详细介绍它们的细节。")]),e._v(" "),v("h3",{attrs:{id:"组合多个widget"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组合多个widget"}},[e._v("#")]),e._v(" 组合多个Widget")]),e._v(" "),v("p",[e._v("这种方式是通过拼装多个组件来组合成一个新的组件。例如我们之前介绍的"),v("code",[e._v("Container")]),e._v("就是一个组合组件，它是由"),v("code",[e._v("DecoratedBox")]),e._v("、"),v("code",[e._v("ConstrainedBox")]),e._v("、"),v("code",[e._v("Transform")]),e._v("、"),v("code",[e._v("Padding")]),e._v("、"),v("code",[e._v("Align")]),e._v("等组件组成。")]),e._v(" "),v("p",[e._v("在Flutter中，组合的思想非常重要，Flutter提供了非常多的基础组件，而我们的界面开发其实就是按照需要组合这些组件来实现各种不同的布局而已。")]),e._v(" "),v("h3",{attrs:{id:"自绘"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自绘"}},[e._v("#")]),e._v(" 自绘")]),e._v(" "),v("p",[e._v("如果遇到无法通过现有的组件来实现需要的UI时，我们可以通过自绘组件的方式来实现，例如我们需要一个颜色渐变的圆形进度条，而Flutter提供的"),v("code",[e._v("CircularProgressIndicator")]),e._v("并不支持在显示精确进度时对进度条应用渐变色（其"),v("code",[e._v("valueColor")]),e._v(" 属性只支持执行旋转动画时变化Indicator的颜色），这时最好的方法就是通过自定义组件来绘制出我们期望的外观。我们可以通过Flutter中提供的"),v("code",[e._v("CustomPaint")]),e._v("和"),v("code",[e._v("Canvas")]),e._v("来实现UI自绘。")]),e._v(" "),v("h3",{attrs:{id:"实现renderobject"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现renderobject"}},[e._v("#")]),e._v(" 实现RenderObject")]),e._v(" "),v("p",[e._v("Flutter提供的自身具有UI外观的组件，如文本"),v("code",[e._v("Text")]),e._v("、"),v("code",[e._v("Image")]),e._v("都是通过相应的"),v("code",[e._v("RenderObject")]),e._v("（我们将在“Flutter核心原理”一章中详细介绍"),v("code",[e._v("RenderObject")]),e._v("）渲染出来的，如Text是由"),v("code",[e._v("RenderParagraph")]),e._v("渲染；而"),v("code",[e._v("Image")]),e._v("是由"),v("code",[e._v("RenderImage")]),e._v("渲染。"),v("code",[e._v("RenderObject")]),e._v("是一个抽象类，它定义了一个抽象方法"),v("code",[e._v("paint(...)")]),e._v("：")]),e._v(" "),v("div",{staticClass:"language-dart line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-dart"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("paint")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("PaintingContext")]),e._v(" context"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Offset")]),e._v(" offset"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br")])]),v("p",[v("code",[e._v("PaintingContext")]),e._v("代表组件的绘制上下文，通过"),v("code",[e._v("PaintingContext.canvas")]),e._v("可以获得"),v("code",[e._v("Canvas")]),e._v("，而绘制逻辑主要是通过"),v("code",[e._v("Canvas")]),e._v(" API来实现。子类需要重写此方法以实现自身的绘制逻辑，如"),v("code",[e._v("RenderParagraph")]),e._v("需要实现文本绘制逻辑，而"),v("code",[e._v("RenderImage")]),e._v("需要实现图片绘制逻辑。")]),e._v(" "),v("p",[e._v("可以发现，"),v("code",[e._v("RenderObject")]),e._v("中最终也是通过"),v("code",[e._v("Canvas")]),e._v(" API来绘制的，那么通过实现"),v("code",[e._v("RenderObject")]),e._v("的方式和上面介绍的通过"),v("code",[e._v("CustomPaint")]),e._v("和"),v("code",[e._v("Canvas")]),e._v("自绘的方式有什么区别？其实答案很简单，"),v("code",[e._v("CustomPaint")]),e._v("只是为了方便开发者封装的一个代理类，它直接继承自"),v("code",[e._v("SingleChildRenderObjectWidget")]),e._v("，通过"),v("code",[e._v("RenderCustomPaint")]),e._v("的"),v("code",[e._v("paint")]),e._v("方法将"),v("code",[e._v("Canvas")]),e._v("和画笔"),v("code",[e._v("Painter")]),e._v("(需要开发者实现，后面章节介绍)连接起来实现了最终的绘制（绘制逻辑在"),v("code",[e._v("Painter")]),e._v("中）。")]),e._v(" "),v("h3",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),v("p",[e._v("“组合”是自定义组件最简单的方法，在任何需要自定义组件的场景下，我们都应该优先考虑是否能够通过组合来实现。而自绘和通过实现"),v("code",[e._v("RenderObject")]),e._v("的方法本质上是一样的，都需要开发者调用"),v("code",[e._v("Canvas")]),e._v(" API手动去绘制UI，优点是强大灵活，理论上可以实现任何外观的UI，而缺点是必须了解"),v("code",[e._v("Canvas")]),e._v(" API细节，并且得自己去实现绘制逻辑。")]),e._v(" "),v("p",[e._v("在本章接下来的小节中，我们将通过一些实例来详细介绍自定义UI的过程，由于后两种方法本质是相同的，并且Flutter中很多基础组件都是通过"),v("code",[e._v("RenderObject")]),e._v("的形式来实现的，所以后续我们只介绍"),v("code",[e._v("CustomPaint")]),e._v("和"),v("code",[e._v("Canvas")]),e._v("的方式，读者如果对自定义"),v("code",[e._v("RenderObject")]),e._v("的方法好奇，可以查看Flutter中相关基础组件对应的"),v("code",[e._v("RenderObject")]),e._v("的实现源码，如"),v("code",[e._v("RenderParagraph")]),e._v("或"),v("code",[e._v("RenderImage")]),e._v("。")])])}),[],!1,null,null,null);t.default=_.exports}}]);