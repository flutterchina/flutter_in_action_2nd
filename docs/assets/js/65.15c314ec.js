(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{416:function(a,t,s){a.exports=s.p+"assets/img/14-9.2acffc4f.png"},643:function(a,t,s){"use strict";s.r(t);var n=s(45),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"_14-5-绘制-一-绘制原理及layer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-5-绘制-一-绘制原理及layer"}},[a._v("#")]),a._v(" 14.5 绘制（一）绘制原理及Layer")]),a._v(" "),n("h2",{attrs:{id:"_14-5-1-flutter-绘制原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-5-1-flutter-绘制原理"}},[a._v("#")]),a._v(" 14.5.1 Flutter 绘制原理")]),a._v(" "),n("p",[a._v("Flutter中和绘制相关的对象有三个，分别是Canvas、Layer 和 Scene：")]),a._v(" "),n("ul",[n("li",[a._v("Canvas：封装了Flutter Skia各种绘制指令，比如画线、画圆、画矩形等指令。")]),a._v(" "),n("li",[a._v("Layer：分为容器类和绘制类两种；暂时可以理解为是绘制产物的载体，比如调用 Canvas 的绘制 API 后，相应的绘制产物被保存在 PictureLayer.picture 对象中。")]),a._v(" "),n("li",[a._v("Scene：屏幕上将要要显示的元素。在上屏前，我们需要将Layer中保存的绘制产物关联到 Scene 上。")])]),a._v(" "),n("p",[a._v("Flutter 绘制流程：")]),a._v(" "),n("ol",[n("li",[a._v("构建一个 Canvas，用于绘制；同时还需要创建一个绘制指令记录器，因为绘制指令最终是要传递给 Skia 的，而 Canvas 可能会连续发起多条绘制指令，指令记录器用于收集 Canvas 在一段时间内所有的绘制质量，因此Canvas 构造函数第一个参数必须传递一个 PictureRecorder 实例。")]),a._v(" "),n("li",[a._v("Canvas 绘制完成后，通过 PictureRecorder 获取绘制产物，然后将其保存在 Layer 中。")]),a._v(" "),n("li",[a._v("构建 Scene 对象，将 layer 的绘制产物和 Scene 关联起来。")]),a._v(" "),n("li",[a._v("上屏；调用window.render API 将Scene上的绘制产物发送给GPU。")])]),a._v(" "),n("p",[a._v("下面我们通过一个实例来演示整个绘制流程：")]),a._v(" "),n("p",[a._v("还记得之前绘制棋盘的例子吗，之前无论是通过CustomPaint还是自定义RenderObject，都是在Flutter的Widget框架模型下进行的绘制，实际上，最终到底层Flutter都会按照上述的流程去完成绘制，既然如此，那么我们也可以直接在main函数中调用这些底层API来完成，下面我们演示一下直接在main函数中在屏幕中绘制棋盘。")]),a._v(" "),n("div",{staticClass:"language-dart line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dart"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//1.创建绘制记录器和Canvas")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PictureRecorder")]),a._v(" recorder "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PictureRecorder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Canvas")]),a._v(" canvas "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Canvas")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("recorder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//2.在指定位置区域绘制。")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" rect "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Rect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("fromLTWH")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("300")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("300")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("drawChessboard")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("canvas"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("rect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//画棋盘")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("drawPieces")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("canvas"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("rect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//画棋子")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//3.创建layer，将绘制的产物保存在layer中")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" pictureLayer "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PictureLayer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("rect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//recorder.endRecording()获取绘制产物。")]),a._v("\n  pictureLayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("picture "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" recorder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("endRecording")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" rootLayer "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OffsetLayer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  rootLayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("pictureLayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//4.上屏，将绘制的内容显示在屏幕上。")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SceneBuilder")]),a._v(" builder "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SceneBuilder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scene")]),a._v(" scene "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" rootLayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("buildScene")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("builder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("scene"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br")])]),n("p",[a._v("运行效果如图14-9：")]),a._v(" "),n("p",[n("img",{attrs:{src:s(416),alt:"图14-9"}})]),a._v(" "),n("h2",{attrs:{id:"_14-5-2-picture"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-5-2-picture"}},[a._v("#")]),a._v(" 14.5.2 Picture")]),a._v(" "),n("p",[a._v("上面我们说过 PictureLayer 的绘制产物是 Picture，关于 Picture 有两点需要阐明：")]),a._v(" "),n("ol",[n("li",[a._v("Picture 实际上是一系列的图形绘制操作指令，这一点可以参考 Picture 类源码的注释。")]),a._v(" "),n("li",[a._v("Picture 要显示在屏幕上，必然会经过光栅化，随后Flutter会将光栅化后的位图信息缓存起来，也就是说同一个 Picture 对象，其绘制指令只会执行一次，执行完成后绘制的位图就会被缓存起来。")])]),a._v(" "),n("p",[a._v("综合以上两点，我们可以看到 PictureLayer 的“绘制产物”一开始是一些列“绘图指令”，当第一次绘制完成后，位图信息就会被缓存，绘制指令也就不会再被执行了，所以这时“绘制产物”就是位图了。为了便于理解，后续我们可以认为指的就是绘制好的位图。")]),a._v(" "),n("h3",{attrs:{id:"canvas绘制的位图转图片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#canvas绘制的位图转图片"}},[a._v("#")]),a._v(" Canvas绘制的位图转图片")]),a._v(" "),n("p",[a._v("既然 Picture 中保存的是绘制产物，那么它也应该能提供一个方法能将绘制产物导出，实际上，Picture有一个toImage方法，可以根据指定的大小导出Image。")]),a._v(" "),n("div",{staticClass:"language-dart line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dart"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//将图片导出为Uint8List")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Image")]),a._v(" image "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("await")]),a._v(" pictureLayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("picture"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("toImage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ByteData")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" byteData "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("await")]),a._v(" image"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("toByteData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("format"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ImageByteFormat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("png"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Uint8List")]),a._v(" pngBytes "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" byteData"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("buffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("asUint8List")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("pngBytes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h2",{attrs:{id:"_14-5-3-layer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-5-3-layer"}},[a._v("#")]),a._v(" 14.5.3 Layer")]),a._v(" "),n("p",[a._v("现在我们思考一个问题：Layer作为绘制产物的持有者有什么作用？ 答案就是：")]),a._v(" "),n("ol",[n("li",[a._v("可以在不同的frame之间复用绘制产物（如果没有发生变化）。")]),a._v(" "),n("li",[a._v("划分绘制边界，缩小重绘范围。")])]),a._v(" "),n("p",[a._v("下面我们来研究一下Flutter中Layer具体是怎么工作的，不过在此之前，我们先要补充一些前置知识。")]),a._v(" "),n("h3",{attrs:{id:"layer类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#layer类型"}},[a._v("#")]),a._v(" Layer类型")]),a._v(" "),n("p",[a._v("本节开始的示例中，我们定义了两个Layer对象：")]),a._v(" "),n("ol",[n("li",[a._v("OffsetLayer：根 Layer，它继承自ContainerLayer，而ContainerLayer继承自 Layer 类，我们将直接继承自ContainerLayer 类的 Layer 称为"),n("strong",[a._v("容器类Layer")]),a._v("，容器类 Layer 可以添加任意多个子Layer。")]),a._v(" "),n("li",[a._v("PictureLayer：保存绘制产物的 Layer，它直接继承自 Layer 类。我们将可以直接承载（或关联）绘制结果的 Layer 称为"),n("strong",[a._v("绘制类 Layer")]),a._v("。")])]),a._v(" "),n("h3",{attrs:{id:"容器类-layer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#容器类-layer"}},[a._v("#")]),a._v(" 容器类 Layer")]),a._v(" "),n("p",[a._v("上面介绍的容器类 Layer 的概念，那么它的作用和具体使用场景是什么呢？")]),a._v(" "),n("ol",[n("li",[n("p",[a._v("将组件树的绘制结构组成一棵树。")]),a._v(" "),n("p",[a._v("因为 Flutter 中的 Widget 是树状结构，那么相应的 RenderObject 对应的"),n("strong",[a._v("绘制结构")]),a._v("也应该是树状结构，Flutter 会根据一些“特定的规则”（后面解释）为组件树生成一棵 Layer 树，而容器类Layer就可以组成树状结构（父 Layer 可以包含任意多个子 Layer，子Layer又可以包含任意多个子Layer）。")])]),a._v(" "),n("li",[n("p",[a._v("可以对多个 layer 整体应用一些变换效果。")]),a._v(" "),n("p",[a._v("容器类 Layer 可以对其子 Layer 整体做一些变换效果，比如剪裁效果（ClipRectLayer、ClipRRectLayer、ClipPathLayer）、过滤效果（ColorFilterLayer、ImageFilterLayer）、矩阵变换（TransformLayer）、透明变换（OpacityLayer）等。")])])]),a._v(" "),n("p",[a._v("虽然 ContainerLayer 并非抽象类，开发者可以直接创建 ContainerLayer 类的示例，但实际上很少会这么做，相反，在需要使用使用 ContainerLayer 时直接使用其子类即可，比如在当前的 Flutter 源码中，笔者没有搜到有直接创建 ContainerLayer 类的地方。如果我们确实不需要任何变换效果，那么就使用 OffsetLayer，不用担心会有额外性能开销，它的底层（Skia 中）实现是非常高效的。")]),a._v(" "),n("blockquote",[n("p",[a._v("约定：后续我们提到 ContainerLayer 时，如无特别说明，它可以代指任意容器类组件。因为我们基本不会直接创建 ContainerLayer 实例，所以基本不会有歧义。")])]),a._v(" "),n("h3",{attrs:{id:"绘制类-layer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#绘制类-layer"}},[a._v("#")]),a._v(" 绘制类 Layer")]),a._v(" "),n("p",[a._v("下面我们重点介绍一下 PictureLayer 类，它是 Flutter 中最常用的一种绘制类Layer。")]),a._v(" "),n("p",[a._v("我们知道最终显示在屏幕上的是位图信息，而位图信息正是由 Canvas API 绘制的。实际上，Canvas 的绘制产物是 Picture 对象表示，而当前版本的 Flutter 中只有 PictureLayer 才拥有 picture 对象，换句话说，Flutter 中通过Canvas 绘制自身及其子节点的组件的绘制结果最终会落在 PictureLayer 中。")]),a._v(" "),n("blockquote",[n("p",[a._v("探索题：Flutter中还有两个Layer类：TextureLayer 和 PlatformViewLayer，读者可以自己研究一下它们的功能及适用场景。")])]),a._v(" "),n("h3",{attrs:{id:"变换效果实现方式的选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变换效果实现方式的选择"}},[a._v("#")]),a._v(" 变换效果实现方式的选择")]),a._v(" "),n("p",[a._v("上面说过 ContainerLayer 可以对其子 layer 整体进行一些变换，实际上，在大多数UI系统的 Canvas API 中也都有一些变换相关的 API ，那么也就意味着一些变换效果我们既可以通过 ContainerLayer 来实现，也可以通过 Canvas 来实现。比如，要实现平移变换，我们既可以使用 OffsetLayer ，也可以直接使用 Canva.translate API。既然如此，那我们选择实现方式的原则是什么呢？")]),a._v(" "),n("p",[a._v("现在，我们先了解一下容器类 Layer 实现变换效果的原理。容器类 Layer的变换在底层是通过 Skia 来实现的，不需要 Canvas 来处理。具体的原理是，有变换功能的容器类 Layer 会对应一个 Skia 引擎中的 Layer，为了和Flutter framework中 Layer 区分，flutter 中将 Skia 的Layer 称为 engine layer。而有变换功能的容器类 Layer 在添加到 Scene 之前就会构建一个 engine layer，我们以 OffsetLayer 为例，看看其相关实现：")]),a._v(" "),n("div",{staticClass:"language-dart line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dart"}},[n("code",[n("span",{pre:!0,attrs:{class:"token metadata symbol"}},[a._v("@override")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("addToScene")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("ui"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("SceneBuilder")]),a._v(" builder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Offset")]),a._v(" layerOffset "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Offset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("zero "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 构建 engine layer")]),a._v("\n  engineLayer "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" builder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("pushOffset")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    layerOffset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dx "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" offset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    layerOffset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dy "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" offset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    oldLayer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" _engineLayer "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("as")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("ui"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("OffsetEngineLayer")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("addChildrenToScene")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("builder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  builder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("pop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br")])]),n("p",[a._v("OffsetLayer 对其子节点整体做偏移变换的功能是 Skia 中实现支持的。Skia 可以支持多层渲染，但并不是层越多越好，engineLayer 是会占用一定的资源，Flutter 自带组件库中涉及到变换效果的都是优先使用 Canvas 来实现，如果 Canvas 实现起来非常困难或实现不了时才会用 ContainerLayer 来实现。")]),a._v(" "),n("p",[a._v("那么有什么场景下变换效果通过 Canvas 实现起来会非常困难，需要用 ContainerLayer 来实现 ？一个典型的场景是，我们需要对组件树中的某个子树整体做变换，且子树中的有多个 PictureLayer 时。这是因为一个 Canvas 往往对应一个 PictureLayer，不同 Canvas 之间相互隔离的，只有子树中所有组件都通过同一个 Canvas 绘制时才能通过该 Canvas 对所有子节点进行整体变换，否则就只能通过 ContainerLayer 。那什么时候子节点会复用同一个 PictureLayer，什么时候又会创建新的 PictureLayer，这个我们在下一节介绍。")]),a._v(" "),n("p",[a._v("好了，有了这些前置知识，下一节我们就可以研究Flutter框架中组件树的绘制流程了。")])])}),[],!1,null,null,null);t.default=e.exports}}]);